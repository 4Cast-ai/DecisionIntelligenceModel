// <auto-generated />
using System;
using Model.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Model.Migrations
{
    [DbContext(typeof(Context))]
    //[Migration("20200728142112_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.Form_Template_Structure_form_template_structure_id_seq", "'Form_Template_Structure_form_template_structure_id_seq', '', '1', '1', '', '', 'Int32', 'False'");

            modelBuilder.Entity("Model.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ActivityTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EndDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name1")
                        .HasColumnType("text");

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StartDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.HasKey("ActivityGuid")
                        .HasName("Activity_pkey");

                    b.HasIndex("ActivityTemplateGuid");

                    b.HasIndex("OrgObjGuid");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Model.Entities.ActivityTemplate", b =>
                {
                    b.Property<string>("ActivityTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProfessionalRecommendations")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("ActivityTemplateGuid")
                        .HasName("Activity_Template_pkey");

                    b.ToTable("ActivityTemplate");
                });

            modelBuilder.Entity("Model.Entities.AtInFt", b =>
                {
                    b.Property<string>("ActivityTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ActivityTemplateGuid", "FormTemplateGuid")
                        .HasName("AtInFt_pkey");

                    b.HasIndex("FormTemplateGuid");

                    b.ToTable("AtInFt");
                });

            modelBuilder.Entity("Model.Entities.CalculateScore", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CalculatedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<double?>("CalculatedScore")
                        .HasColumnType("double precision");

                    b.Property<double?>("ConvertionScore")
                        .HasColumnType("double precision");

                    b.Property<string>("FormElementGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentComment")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("OriginalScore")
                        .HasColumnType("double precision");

                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ScoreId")
                        .HasName("CalculateScore_pkey");

                    b.HasIndex("ActivityGuid");

                    b.HasIndex("FormElementGuid");

                    b.HasIndex("FormGuid");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("OrgObjGuid");

                    b.ToTable("CalculateScore");
                });

            modelBuilder.Entity("Model.Entities.CalenderRollup", b =>
                {
                    b.Property<int>("CalenderRollupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CalenderRollupName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("CalenderRollupId");

                    b.ToTable("CalenderRollup");
                });

            modelBuilder.Entity("Model.Entities.Candidate", b =>
                {
                    b.Property<string>("UserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AreaCode")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int?>("CorpId")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseOfStudy1")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseOfStudy2")
                        .HasColumnType("integer");

                    b.Property<double?>("Dapar")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("EndDateRank")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDateUnit")
                        .HasColumnType("date");

                    b.Property<string>("EnrichmentId")
                        .HasColumnType("character varying");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdValue")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Job")
                        .HasColumnType("integer");

                    b.Property<double?>("Kaba")
                        .HasColumnType("double precision");

                    b.Property<string>("MinuyText")
                        .HasColumnType("character varying");

                    b.Property<string>("ObviousGood")
                        .HasColumnType("character varying");

                    b.Property<int?>("PersonalNumber")
                        .HasColumnType("integer");

                    b.Property<byte[][]>("Photo")
                        .HasColumnType("bytea[]");

                    b.Property<int?>("RankId")
                        .HasColumnType("integer");

                    b.Property<string>("ReadyKidum")
                        .HasColumnType("character varying");

                    b.Property<int?>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("Slabs")
                        .HasColumnType("character varying");

                    b.Property<int?>("StandardRank")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDateRank")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartDateUnit")
                        .HasColumnType("date");

                    b.Property<int?>("SuccessMeasur")
                        .HasColumnType("integer");

                    b.Property<int?>("Zdecoration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ZgrantDate")
                        .HasColumnType("date");

                    b.HasKey("UserGuid")
                        .HasName("Candidate_pkey");

                    b.ToTable("Candidate");
                });

            modelBuilder.Entity("Model.Entities.ConvertionTable", b =>
                {
                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double>("LevelId")
                        .HasColumnType("double precision");

                    b.Property<string>("ConversionTableCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<double?>("ConversionTableFinalScore")
                        .HasColumnType("double precision");

                    b.Property<string>("ConversionTableModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("ConversionTableScoreOrder")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ConversionTableStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("EndRange")
                        .HasColumnType("double precision");

                    b.Property<double?>("EndRangeScoreDisplayed")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartRange")
                        .HasColumnType("double precision");

                    b.Property<double?>("StartRangeScoreDisplayed")
                        .HasColumnType("double precision");

                    b.HasKey("ModelComponentGuid", "LevelId")
                        .HasName("Convertion_table_pkey");

                    b.ToTable("ConvertionTable");
                });
           
            modelBuilder.Entity("Model.Entities.Description", b =>
                {
                    b.Property<int>("DescriptionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Creator")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatorUserGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Modify")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("TypeGuid")
                        .HasColumnType("integer");

                    b.HasKey("DescriptionGuid")
                        .HasName("Description_pkey");

                    b.HasIndex("TypeGuid");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("Model.Entities.DescriptionType", b =>
                {
                    b.Property<int>("TypeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeGuid")
                        .HasName("Description_Type_pkey");

                    b.ToTable("DescriptionType");
                });

            modelBuilder.Entity("Model.Entities.EnvironmentTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("character(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Logo")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnType("character(100)")
                        .IsFixedLength(true)
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EnvironmentTable");
                });

            modelBuilder.Entity("Model.Entities.EstimatedOrganizationObject", b =>
                {
                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjEstimatedGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrgObjGuid", "ActivityGuid", "OrgObjEstimatedGuid")
                        .HasName("Estimated_Organization_Object_pkey");

                    b.HasIndex("ActivityGuid");

                    b.HasIndex("OrgObjEstimatedGuid");

                    b.ToTable("EstimatedOrganizationObject");
                });

            modelBuilder.Entity("Model.Entities.Form", b =>
                {
                    b.Property<string>("FormGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ApproveDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("ApproveUserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("FormGuid")
                        .HasName("Form_pkey");

                    b.HasIndex("ActivityGuid");

                    b.HasIndex("ApproveUserGuid");

                    b.HasIndex("FormTemplateGuid");

                    b.HasIndex("OrgObjGuid");

                    b.HasIndex("Status");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Model.Entities.FormElement", b =>
                {
                    b.Property<string>("FormElementGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormElementTitle")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("FormElementType")
                        .HasColumnType("integer");

                    b.HasKey("FormElementGuid")
                        .HasName("Form_Element_pkey");

                    b.HasIndex("FormElementType");

                    b.ToTable("Form_Element");
                });

            modelBuilder.Entity("Model.Entities.FormElementConnection", b =>
                {
                    b.Property<string>("FormElementGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("FormElementGuid", "ModelComponentGuid")
                        .HasName("Form_Element_Connection_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("FormElementConnection");
                });

            modelBuilder.Entity("Model.Entities.FormElementType", b =>
                {
                    b.Property<int>("FormElementTypeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("FormElementTypeGuid")
                        .HasName("Form_Element_Type_pkey");

                    b.ToTable("FormElementType");
                });

            modelBuilder.Entity("Model.Entities.FormStatus", b =>
                {
                    b.Property<int>("FormStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("FormStatusId");

                    b.ToTable("FormStatus");
                });

            modelBuilder.Entity("Model.Entities.FormTemplate", b =>
                {
                    b.Property<string>("FormTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("CreatorUserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("FormTemplateGuid")
                        .HasName("Form_Template_pkey");

                    b.HasIndex("CreatorUserGuid");

                    b.ToTable("FormTemplate");
                });

            modelBuilder.Entity("Model.Entities.FormTemplateStructure", b =>
                {
                    b.Property<int>("FormTemplateStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FormElementGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormTemplateGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("FormTemplateStructureId");

                    b.HasIndex("FormElementGuid");

                    b.HasIndex("FormTemplateGuid");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("FormTemplateStructure");
                });

            modelBuilder.Entity("Model.Entities.JobTitles", b =>
                {
                    b.Property<string>("JobTitleGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("JobTitleCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("JobTitleDeleteDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("JobTitleDescription")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<double>("JobTitleId")
                        .HasColumnType("double precision");

                    b.Property<string>("JobTitleName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("JobTitleParentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("JobTitleGuid")
                        .HasName("Job_titles_pkey");

                    b.ToTable("Jobtitles");
                });

            modelBuilder.Entity("Model.Entities.JobTitlesInUnitTypes", b =>
                {
                    b.Property<string>("UnitTypeGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("JobTitleGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UnitTypeGuid", "JobTitleGuid")
                        .HasName("Job_titles_in_unit_types_pkey");

                    b.HasIndex("JobTitleGuid");

                    b.ToTable("JobTitlesInUnitTypes");
                });

            modelBuilder.Entity("Model.Entities.LoggerDetails", b =>
                {
                    b.Property<int>("LogNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LogCategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LogError")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LogNumber")
                        .HasName("Logger_Details_pkey");

                    b.ToTable("LoggerDetails");
                });

            modelBuilder.Entity("Model.Entities.MeasuringUnit", b =>
                {
                    b.Property<int>("MeasuringUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MeasuringUnitName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("MeasuringUnitId");

                    b.ToTable("MeasuringUnit");
                });

            modelBuilder.Entity("Model.Entities.ModelComponent", b =>
                {
                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<int?>("DescriptionType")
                        .HasColumnType("integer");

                    b.Property<int?>("MetricCalenderRollup")
                        .HasColumnType("integer");

                    b.Property<double?>("MetricCommentObligationLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("MetricExpiredPeriod")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("MetricExpiredPeriodSecondary")
                       .HasColumnType("character varying(25)")
                       .HasMaxLength(25);

                    b.Property<string>("MetricFormula")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("MetricGradualDecreasePeriod")
                        .HasColumnType("double precision");

                    b.Property<double?>("MetricGradualDecreasePrecent")
                        .HasColumnType("double precision");

                    b.Property<bool?>("MetricIsVisible")
                        .HasColumnType("boolean");

                    b.Property<int?>("MetricMeasuringUnit")
                        .HasColumnType("integer");

                    b.Property<double?>("MetricMinimumFeeds")
                        .HasColumnType("double precision");

                    b.Property<bool?>("MetricNotDisplayIfIrrelevant")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MetricRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("MetricRollupMethod")
                        .HasColumnType("integer");

                    b.Property<int?>("MetricSource")
                        .HasColumnType("integer");

                    b.Property<int?>("ModelComponentOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedDate")
                        .IsRequired()
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("ModifiedUserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ProfessionalInstruction")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("ShowOrigionValue")
                        .HasColumnType("boolean");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("ModelComponentGuid")
                        .HasName("Model_Component_pkey");

                    b.HasIndex("DescriptionType");

                    b.HasIndex("MetricCalenderRollup");

                    b.HasIndex("MetricMeasuringUnit");

                    b.HasIndex("MetricRollupMethod");

                    b.HasIndex("MetricSource");

                    b.HasIndex("ModifiedUserGuid");

                    b.HasIndex("Source");

                    b.HasIndex("Status");

                    b.ToTable("ModelComponent");
                });

            modelBuilder.Entity("Model.Entities.ModelComponentSource", b =>
                {
                    b.Property<int>("ModelComponentSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ModelComponentSourceName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ModelComponentSourceId");

                    b.ToTable("ModelComponentSource");
                });

            modelBuilder.Entity("Model.Entities.ModelComponentStatus", b =>
                {
                    b.Property<int>("ModelComponentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ModelComponentStatusName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ModelComponentStatusId");

                    b.ToTable("ModelComponentStatus");
                });

            modelBuilder.Entity("Model.Entities.ModelComponentType", b =>
                {
                    b.Property<int>("TypeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TypeName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeGuid")
                        .HasName("Model_Component_Type_pkey");

                    b.ToTable("ModelComponentType");
                });

            modelBuilder.Entity("Model.Entities.ModelDescription", b =>
                {
                    b.Property<int>("ModelDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DescriptionGuid")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityDescriptionGuid")
                        .HasColumnType("integer");

                    b.Property<string>("ModelComponentGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ModelDescriptionId");

                    b.HasIndex("DescriptionGuid");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("ModelDescription");
                });

            modelBuilder.Entity("Model.Entities.ModelStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ModelComponentGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentOrigionGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentParentGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ModelComponentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("ModelComponentOrigionGuid");

                    b.HasIndex("ModelComponentParentGuid");

                    b.HasIndex("ModelComponentType");

                    b.ToTable("ModelStructure");
                });

            modelBuilder.Entity("Model.Entities.ModelsForUnitType", b =>
                {
                    b.Property<string>("UnitTypeGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelsForUnitTypeCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("ModelsForUnitTypeDeleteDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.HasKey("UnitTypeGuid", "ModelComponentGuid")
                        .HasName("Models_for_unit_type_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("ModelsForUnitType");
                });

            modelBuilder.Entity("Model.Entities.OrgModelPolygon", b =>
                {
                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PolygonGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrgObjGuid", "ModelComponentGuid", "PolygonGuid")
                        .HasName("Org_Model_Polygon_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("OrgModelPolygon");
                });

            modelBuilder.Entity("Model.Entities.Organization", b =>
                {
                    b.Property<string>("OrgGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("DescriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrgGuid")
                        .HasName("Organization_pkey");

                    b.HasIndex("DescriptionType");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Model.Entities.OrganizationObject", b =>
                {
                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("DescriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrgObjGuid")
                        .HasName("Organization_Object_pkey");

                    b.HasIndex("DescriptionType");

                    b.ToTable("OrganizationObject");
                });

            modelBuilder.Entity("Model.Entities.OrganizationObjectConnection", b =>
                {
                    b.Property<int>("OrgObjConnGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivityTemplateGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("DescriptionGuid")
                        .HasColumnType("integer");

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrgObjConnGuid")
                        .HasName("Organization_Object_Connection_pkey");

                    b.HasIndex("ActivityTemplateGuid");

                    b.HasIndex("DescriptionGuid");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("OrgObjGuid");

                    b.ToTable("OrganizationObjectConnection");
                });

            modelBuilder.Entity("Model.Entities.OrganizationStructure", b =>
                {
                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjParentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgParentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrgObjGuid")
                        .HasName("Organization_Structure_pkey");

                    b.HasIndex("OrgObjParentGuid");

                    b.HasIndex("OrgParentGuid");

                    b.ToTable("OrganizationStructure");
                });

            modelBuilder.Entity("Model.Entities.OutSourceScore", b =>
                {
                    b.Property<string>("UserGuid")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("UserGuid", "ModelComponentGuid", "EventDate")
                        .HasName("OutSource_Score_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("OutSourceScore");
                });

            modelBuilder.Entity("Model.Entities.PermissionTypes", b =>
                {
                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PermissionTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("PermissionTypeId")
                        .HasName("PermissionTypes_pkey");

                    b.ToTable("PermissionTypes");
                });

            modelBuilder.Entity("Model.Entities.PermissionsUnitType", b =>
                {
                    b.Property<string>("LoginUnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VisibleUnitTypeGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("LoginUnitGuid", "VisibleUnitTypeGuid")
                        .HasName("Permissions_Unit_Type_pkey");

                    b.ToTable("PermissionsUnitType");
                });

            modelBuilder.Entity("Model.Entities.PermissionsUnits", b =>
                {
                    b.Property<string>("LoginUnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VisibleUnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("LoginUnitGuid", "VisibleUnitGuid")
                        .HasName("Permissions_Units_pkey");

                    b.ToTable("PermissionsUnits");
                });

            modelBuilder.Entity("Model.Entities.Polygon", b =>
                {
                    b.Property<string>("PolygonGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PointIcon")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PolygonBorderColor")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("PolygonBorderWidth")
                        .HasColumnType("integer");

                    b.Property<string>("PolygonFillColor")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<double?>("PolygonFillTransparency")
                        .HasColumnType("double precision");

                    b.Property<short?>("PolygonGeometryType")
                        .HasColumnType("smallint");

                    b.Property<string>("PolygonLayerGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PolygonName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("PolygonNameX")
                        .HasColumnType("double precision");

                    b.Property<double?>("PolygonNameY")
                        .HasColumnType("double precision");

                    b.Property<string>("PolygonTextColor")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("PolygonGuid")
                        .HasName("Polygon_pkey");

                    b.ToTable("Polygon");
                });

            modelBuilder.Entity("Model.Entities.PolygonLayers", b =>
                {
                    b.Property<string>("PolygonLayerGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("PolygonLayerIsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("PolygonLayerName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("PolygonLayerGuid")
                        .HasName("Polygon_layers_pkey");

                    b.ToTable("PolygonLayers");
                });

            modelBuilder.Entity("Model.Entities.PolygonPoints", b =>
                {
                    b.Property<string>("PolygonGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<short>("PointNum")
                        .HasColumnType("smallint");

                    b.Property<double?>("PointX")
                        .HasColumnType("double precision");

                    b.Property<double?>("PointY")
                        .HasColumnType("double precision");

                    b.HasKey("PolygonGuid", "PointNum")
                        .HasName("Polygon_Points_pkey");

                    b.ToTable("PolygonPoints");
                });

            modelBuilder.Entity("Model.Entities.ReportType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("TypeId")
                        .HasName("Report_Type_pkey");

                    b.ToTable("ReportType");
                });

            modelBuilder.Entity("Model.Entities.RoleItems", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleItemId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "RoleItemId")
                        .HasName("PK_RoleId_RolItemId");

                    b.ToTable("RoleItems");
                });

            modelBuilder.Entity("Model.Entities.RolePermissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionTypeId")
                        .HasName("RolePermissions_pkey");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Model.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OrgObjGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("character varying(14)")
                        .HasMaxLength(14);

                    b.Property<string>("UpdateUserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.HasIndex("OrgObjGuid");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Entities.RollupMethod", b =>
                {
                    b.Property<int>("RollupMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RollupMethodName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("RollupMethodId");

                    b.ToTable("RollupMethod");
                });

            modelBuilder.Entity("Model.Entities.SavedMapReportsData", b =>
                {
                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsReportComments")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReportFocus")
                        .HasColumnType("boolean");

                    b.HasKey("ReportGuid", "ModelGuid", "MetricGuid")
                        .HasName("Saved_map_reports_data_pkey");

                    b.ToTable("SavedMapReportsData");
                });

            modelBuilder.Entity("Model.Entities.SavedReportByActivites", b =>
                {
                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReportGuid", "ModelGuid", "ActivityGuid")
                        .HasName("Saved_Report_By_Activites_pkey");

                    b.ToTable("SavedReportByActivites");
                });

            modelBuilder.Entity("Model.Entities.SavedReportConnection", b =>
                {
                    b.Property<int>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Focus")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ConnectionId")
                        .HasName("Saved_Report_Connection_pkey");

                    b.HasIndex("Comment");

                    b.HasIndex("Focus");

                    b.HasIndex("OrgObjGuid");

                    b.HasIndex("ReportGuid");

                    b.ToTable("SavedReportConnection");
                });

            modelBuilder.Entity("Model.Entities.SavedReportData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ReportData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("ReportGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SavedReportData");
                });

            modelBuilder.Entity("Model.Entities.SavedReportWeakness", b =>
                {
                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WeaknessGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CalculatedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<double>("CalculatedScore")
                        .HasColumnType("double precision");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("ReportGuid", "ModelComponentGuid", "WeaknessGuid", "OrgObjGuid", "CalculatedDate")
                        .HasName("Saved_Report_Weakness_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("OrgObjGuid");

                    b.ToTable("SavedReportWeakness");
                });

            modelBuilder.Entity("Model.Entities.SavedReports", b =>
                {
                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CalculatedDates")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSecondary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWatch")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelComponentGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ReportType")
                        .HasColumnType("integer");

                    b.Property<string>("UserGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReportGuid")
                        .HasName("Saved_reports_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("ReportType");

                    b.HasIndex("UserGuid");

                    b.ToTable("SavedReports");
                });

            modelBuilder.Entity("Model.Entities.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActivityGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("ConvertionScore")
                        .HasColumnType("double precision");

                    b.Property<string>("FormElementGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FormGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentComment")
                        .HasColumnType("character varying");

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("OriginalScore")
                        .HasColumnType("double precision");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ScoreId");

                    b.HasIndex("ActivityGuid");

                    b.HasIndex("FormElementGuid");

                    b.HasIndex("FormGuid");

                    b.HasIndex("ModelComponentGuid");

                    b.HasIndex("OrgObjGuid");

                    b.HasIndex("Status");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("Model.Entities.StrengthWeakness", b =>
                {
                    b.Property<string>("MetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SwMetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MetricCalculatedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("SwUnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SwModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("MetricIsStrength")
                        .HasColumnType("boolean");

                    b.Property<double?>("OrderNum")
                        .HasColumnType("double precision");

                    b.HasKey("MetricGuid", "UnitGuid", "ModelGuid", "SwMetricGuid", "MetricCalculatedDate", "SwUnitGuid", "SwModelGuid")
                        .HasName("Strength_weakness_pkey");

                    b.ToTable("StrengthWeakness");
                });

            modelBuilder.Entity("Model.Entities.SystemJobTitles", b =>
                {
                    b.Property<int>("UserAdminPermission")
                        .HasColumnType("integer");

                    b.Property<string>("JobTitleName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("UserAdminPermission")
                        .HasName("System_Job_titles_pkey");

                    b.ToTable("SystemJobTitles");
                });

            modelBuilder.Entity("Model.Entities.Threshold", b =>
                {
                    b.Property<string>("ThresholdGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelComponentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FreeThresholdMessage")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ThresholdAffectedLevel")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdAffectedMetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("ThresholdAffectedScore")
                        .HasColumnType("double precision");

                    b.Property<string>("ThresholdAffectedScoreLevelGrp")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdAffectedTerm")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdCosts")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ThresholdCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<double>("ThresholdId")
                        .HasColumnType("double precision");

                    b.Property<string>("ThresholdLevel")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdMessage")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ThresholdMetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("ThresholdRecommendations")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("ThresholdScore")
                        .HasColumnType("double precision");

                    b.Property<string>("ThresholdScoreLevelGrp")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ThresholdTerm")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ThresholdGuid", "ModelComponentGuid")
                        .HasName("Threshold_pkey");

                    b.HasIndex("ModelComponentGuid");

                    b.ToTable("Threshold");
                });

            modelBuilder.Entity("Model.Entities.ThresholdHistory", b =>
                {
                    b.Property<string>("ThresholdGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdAffectedMetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("MetricCalculatedDate")
                        .HasColumnType("date");

                    b.Property<string>("UnitGuidAffecting")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThresholdMetricGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ThresholdGuid", "ModelGuid", "UnitGuid", "ThresholdAffectedMetricGuid", "MetricCalculatedDate", "UnitGuidAffecting")
                        .HasName("ThresholdHistory_pkey");

                    b.ToTable("ThresholdHistory");
                });

            modelBuilder.Entity("Model.Entities.ThresholdLevels", b =>
                {
                    b.Property<string>("ThresholdGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double>("ThresholdLevel")
                        .HasColumnType("double precision");

                    b.Property<double?>("ThresholdIndicationScore")
                        .HasColumnType("double precision");

                    b.Property<double?>("ThresholdScore")
                        .HasColumnType("double precision");

                    b.HasKey("ThresholdGuid", "ThresholdLevel")
                        .HasName("Threshold_Levels_pkey");

                    b.ToTable("ThresholdLevels");
                });

            modelBuilder.Entity("Model.Entities.ThresholdsReference", b =>
                {
                    b.Property<string>("ThresholdGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ModelGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RefModelGuid")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ThresholdGuid", "ModelGuid")
                        .HasName("ThresholdsReference_pkey");

                    b.ToTable("ThresholdsReference");
                });

            modelBuilder.Entity("Model.Entities.Unit", b =>
                {
                    b.Property<string>("UnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsEstimateUnit")
                        .HasColumnType("boolean");

                    b.Property<string>("PolygonGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitCatalogId")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UnitCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UnitDescription")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<double>("UnitId")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UnitName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UnitParentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UnitTypeGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UnitGuid")
                        .HasName("Unit_pkey");

                    b.HasIndex("UnitParentGuid");

                    b.HasIndex("UnitTypeGuid");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("Model.Entities.UnitBinding", b =>
                {
                    b.Property<string>("UnitBindingGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UbInlevelOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UnitBindingCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UnitBindingFatherGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitBindingName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UnitBindingStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("UnitBindingGuid", "UnitGuid")
                        .HasName("Unit_binding_pkey");

                    b.HasIndex("UnitGuid");

                    b.ToTable("UnitBinding");
                });

            modelBuilder.Entity("Model.Entities.UnitTypes", b =>
                {
                    b.Property<string>("UnitTypeGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ForceType")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("integer");

                    b.Property<int>("RateType")
                        .HasColumnType("integer");

                    b.Property<int>("UnitOrEchelon")
                        .HasColumnType("integer");

                    b.Property<string>("UnitTypeCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<int?>("UnitTypeDefinition")
                        .HasColumnType("integer");

                    b.Property<string>("UnitTypeDescription")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<double>("UnitTypeId")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitTypeModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UnitTypeName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UnitTypeParentGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitTypeStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("UnitTypeGuid")
                        .HasName("Unit_types_pkey");

                    b.HasIndex("UnitTypeParentGuid");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("Model.Entities.UnitsInReport", b =>
                {
                    b.Property<string>("ReportGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReportGuid", "UnitGuid")
                        .HasName("Units_in_report_pkey");

                    b.ToTable("UnitsInReport");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<string>("UserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("JobTitleGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrgObjGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserAdminPermission")
                        .HasColumnType("integer");

                    b.Property<string>("UserBusinessPhone")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserCreateDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UserEmail")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserFirstName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserLastName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserMobilePhone")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserModifiedDate")
                        .HasColumnType("character(14)")
                        .IsFixedLength(true)
                        .HasMaxLength(14);

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserNotes")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserPassword")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserStatus")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.HasKey("UserGuid")
                        .HasName("User_pkey");

                    b.HasIndex("OrgObjGuid");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserType");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Model.Entities.UserMaps", b =>
                {
                    b.Property<string>("UserGuid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("LayerOrder")
                        .HasColumnType("integer");

                    b.Property<double?>("CenterX")
                        .HasColumnType("double precision");

                    b.Property<double?>("CenterY")
                        .HasColumnType("double precision");

                    b.Property<string>("MapName")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("MaxZoom")
                        .HasColumnType("integer");

                    b.Property<int?>("MinZoom")
                        .HasColumnType("integer");

                    b.HasKey("UserGuid", "LayerOrder")
                        .HasName("User_Maps_pkey");

                    b.ToTable("UserMaps");
                });

            modelBuilder.Entity("Model.Entities.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserTypeId")
                        .HasName("User_Type_pkey");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Model.Entities.Activity", b =>
                {
                    b.HasOne("Model.Entities.ActivityTemplate", "ActivityTemplateGu")
                        .WithMany("Activity")
                        .HasForeignKey("ActivityTemplateGuid")
                        .HasConstraintName("FK_Activities_Activity_template");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("Activity")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Activity_Organization_Object");
                });

            modelBuilder.Entity("Model.Entities.AtInFt", b =>
                {
                    b.HasOne("Model.Entities.ActivityTemplate", "ActivityTemplateGu")
                        .WithMany("AtInFt")
                        .HasForeignKey("ActivityTemplateGuid")
                        .HasConstraintName("FK_AtInFt_ActivityTemplate")
                        .IsRequired();

                    b.HasOne("Model.Entities.FormTemplate", "FormTemplateGu")
                        .WithMany("AtInFt")
                        .HasForeignKey("FormTemplateGuid")
                        .HasConstraintName("FK_AT_In_FT_Form_Template")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.CalculateScore", b =>
                {
                    b.HasOne("Model.Entities.Activity", "ActivityGu")
                        .WithMany("CalculateScore")
                        .HasForeignKey("ActivityGuid")
                        .HasConstraintName("FK_Calculate_Score_Activity");

                    b.HasOne("Model.Entities.FormElement", "FormElementGu")
                        .WithMany("CalculateScore")
                        .HasForeignKey("FormElementGuid")
                        .HasConstraintName("FK_Calculate_Score_Form_Element");

                    b.HasOne("Model.Entities.Form", "FormGu")
                        .WithMany("CalculateScore")
                        .HasForeignKey("FormGuid")
                        .HasConstraintName("FK_Calculate_Score_Form");

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("CalculateScore")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Calculate_Score_Model_Component");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("CalculateScore")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Calculate_Score_Organization_Object");

                    b.HasOne("Model.Entities.CalculateScore", "Score")
                        .WithOne("InverseScore")
                        .HasForeignKey("Model.Entities.CalculateScore", "ScoreId")
                        .HasConstraintName("FK_Calculate_Score_Score")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Candidate", b =>
                {
                    b.HasOne("Model.Entities.User", "UserGu")
                        .WithOne("Candidate")
                        .HasForeignKey("Model.Entities.Candidate", "UserGuid")
                        .HasConstraintName("FK_Candidate_User")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.ConvertionTable", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("ConvertionTable")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Convertion_tables_Model_Component")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Description", b =>
                {
                    b.HasOne("Model.Entities.DescriptionType", "TypeGu")
                        .WithMany("Description")
                        .HasForeignKey("TypeGuid")
                        .HasConstraintName("FK_Description_Description_Type");
                });

            modelBuilder.Entity("Model.Entities.DescriptionType", b =>
                {
                    b.HasOne("Model.Entities.DescriptionType", "TypeGu")
                        .WithOne("InverseTypeGu")
                        .HasForeignKey("Model.Entities.DescriptionType", "TypeGuid")
                        .HasConstraintName("FK_Description_Type_Description_Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.EstimatedOrganizationObject", b =>
                {
                    b.HasOne("Model.Entities.Activity", "ActivityGu")
                        .WithMany("EstimatedOrganizationObject")
                        .HasForeignKey("ActivityGuid")
                        .HasConstraintName("FK_Estimated_Organization_Object_Activity")
                        .IsRequired();

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjEstimatedGu")
                        .WithMany("EstimatedOrganizationObjectOrgObjEstimatedGu")
                        .HasForeignKey("OrgObjEstimatedGuid")
                        .HasConstraintName("FK_Estimated_Organization_Object_Organization_Object1")
                        .IsRequired();

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("EstimatedOrganizationObjectOrgObjGu")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Estimated_Organization_Object_Organization_Object")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Form", b =>
                {
                    b.HasOne("Model.Entities.Activity", "ActivityGu")
                        .WithMany("Form")
                        .HasForeignKey("ActivityGuid")
                        .HasConstraintName("FK_Forms_Activities");

                    b.HasOne("Model.Entities.User", "ApproveUserGu")
                        .WithMany("Form")
                        .HasForeignKey("ApproveUserGuid")
                        .HasConstraintName("FK_Forms_Users");

                    b.HasOne("Model.Entities.FormTemplate", "FormTemplateGu")
                        .WithMany("Form")
                        .HasForeignKey("FormTemplateGuid")
                        .HasConstraintName("FK_Forms_Form_templates");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("Form")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Form_Organization_Object");

                    b.HasOne("Model.Entities.FormStatus", "StatusNavigation")
                        .WithMany("Form")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Form_Form_Status");
                });

            modelBuilder.Entity("Model.Entities.FormElement", b =>
                {
                    b.HasOne("Model.Entities.FormElementType", "FormElementTypeNavigation")
                        .WithMany("FormElement")
                        .HasForeignKey("FormElementType")
                        .HasConstraintName("FK_Form_Element_Form_Element_Type");
                });

            modelBuilder.Entity("Model.Entities.FormElementConnection", b =>
                {
                    b.HasOne("Model.Entities.FormElement", "FormElementGu")
                        .WithMany("FormElementConnection")
                        .HasForeignKey("FormElementGuid")
                        .HasConstraintName("FK_Form_Element_Connection_Form_Element")
                        .IsRequired();

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("FormElementConnection")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Form_Element_Connection_Model_Component")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.FormTemplate", b =>
                {
                    b.HasOne("Model.Entities.User", "CreatorUserGu")
                        .WithMany("FormTemplate")
                        .HasForeignKey("CreatorUserGuid")
                        .HasConstraintName("FK_Form_templates_Users");
                });

            modelBuilder.Entity("Model.Entities.FormTemplateStructure", b =>
                {
                    b.HasOne("Model.Entities.FormElement", "FormElementGu")
                        .WithMany("FormTemplateStructure")
                        .HasForeignKey("FormElementGuid")
                        .HasConstraintName("FK_Form_Template_Structure_Form_Element");

                    b.HasOne("Model.Entities.FormTemplate", "FormTemplateGu")
                        .WithMany("FormTemplateStructure")
                        .HasForeignKey("FormTemplateGuid")
                        .HasConstraintName("FK_Form_Template_Structure_Form_Template")
                        .IsRequired();

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("FormTemplateStructure")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Form_Template_Structure_Model_Component");
                });

            modelBuilder.Entity("Model.Entities.JobTitlesInUnitTypes", b =>
                {
                    b.HasOne("Model.Entities.JobTitles", "JobTitleGu")
                        .WithMany("JobTitlesInUnitTypes")
                        .HasForeignKey("JobTitleGuid")
                        .HasConstraintName("FK_Job_titles_in_unit_types_Job_titles")
                        .IsRequired();

                    b.HasOne("Model.Entities.UnitTypes", "UnitTypeGu")
                        .WithMany("JobTitlesInUnitTypes")
                        .HasForeignKey("UnitTypeGuid")
                        .HasConstraintName("FK_Job_titles_in_unit_types_Unit_types")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.ModelComponent", b =>
                {
                    b.HasOne("Model.Entities.DescriptionType", "DescriptionTypeNavigation")
                        .WithMany("ModelComponent")
                        .HasForeignKey("DescriptionType")
                        .HasConstraintName("FK_Model_Component_Description_Type");

                    b.HasOne("Model.Entities.CalenderRollup", "MetricCalenderRollupNavigation")
                        .WithMany("ModelComponent")
                        .HasForeignKey("MetricCalenderRollup")
                        .HasConstraintName("FK_Model_Component_Calender_Rollup");

                    b.HasOne("Model.Entities.MeasuringUnit", "MetricMeasuringUnitNavigation")
                        .WithMany("ModelComponent")
                        .HasForeignKey("MetricMeasuringUnit")
                        .HasConstraintName("FK_Model_Component_Measuring_Unit");

                    b.HasOne("Model.Entities.RollupMethod", "MetricRollupMethodNavigation")
                        .WithMany("ModelComponent")
                        .HasForeignKey("MetricRollupMethod")
                        .HasConstraintName("FK_Model_Component_Rollup_Method");

                    b.HasOne("Model.Entities.ModelComponentSource", "MetricSourceNavigation")
                        .WithMany("ModelComponentMetricSourceNavigation")
                        .HasForeignKey("MetricSource")
                        .HasConstraintName("FK_Model_Component_Model_Component_Source1");

                    b.HasOne("Model.Entities.User", "ModifiedUserGu")
                        .WithMany("ModelComponent")
                        .HasForeignKey("ModifiedUserGuid")
                        .HasConstraintName("FK_Model_Component_User");

                    b.HasOne("Model.Entities.ModelComponentSource", "SourceNavigation")
                        .WithMany("ModelComponentSourceNavigation")
                        .HasForeignKey("Source")
                        .HasConstraintName("FK_Model_Component_Model_Component_Source")
                        .IsRequired();

                    b.HasOne("Model.Entities.ModelComponentStatus", "StatusNavigation")
                        .WithMany("ModelComponent")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Model_Component_Model_Component_Status");
                });

            modelBuilder.Entity("Model.Entities.ModelDescription", b =>
                {
                    b.HasOne("Model.Entities.Description", "DescriptionGu")
                        .WithMany("ModelDescription")
                        .HasForeignKey("DescriptionGuid")
                        .HasConstraintName("FK_Model_Description_Description");

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("ModelDescription")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Model_Description_Models")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.ModelStructure", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("ModelStructureModelComponentGu")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Model_Structure_Model_Component")
                        .IsRequired();

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentOrigionGu")
                        .WithMany("ModelStructureModelComponentOrigionGu")
                        .HasForeignKey("ModelComponentOrigionGuid")
                        .HasConstraintName("FK_Model_Structure_Model_Component2");

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentParentGu")
                        .WithMany("ModelStructureModelComponentParentGu")
                        .HasForeignKey("ModelComponentParentGuid")
                        .HasConstraintName("FK_Model_Structure_Model_Component1")
                        .IsRequired();

                    b.HasOne("Model.Entities.ModelComponentType", "ModelComponentTypeNavigation")
                        .WithMany("ModelStructure")
                        .HasForeignKey("ModelComponentType")
                        .HasConstraintName("FK_Model_Structure_Model_Component_Type");
                });

            modelBuilder.Entity("Model.Entities.ModelsForUnitType", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("ModelsForUnitType")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Models_for_unit_type_Models")
                        .IsRequired();

                    b.HasOne("Model.Entities.UnitTypes", "UnitTypeGu")
                        .WithMany("ModelsForUnitType")
                        .HasForeignKey("UnitTypeGuid")
                        .HasConstraintName("FK_Models_for_unit_type_Unit_types")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.OrgModelPolygon", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("OrgModelPolygon")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("model_component_guid_pkey")
                        .IsRequired();

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("OrgModelPolygon")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("org_obj_guid_pkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Organization", b =>
                {
                    b.HasOne("Model.Entities.DescriptionType", "DescriptionTypeNavigation")
                        .WithMany("Organization")
                        .HasForeignKey("DescriptionType")
                        .HasConstraintName("FK_Organization_Description_Type");
                });

            modelBuilder.Entity("Model.Entities.OrganizationObject", b =>
                {
                    b.HasOne("Model.Entities.DescriptionType", "DescriptionTypeNavigation")
                        .WithMany("OrganizationObject")
                        .HasForeignKey("DescriptionType")
                        .HasConstraintName("FK_Organization_Object_Description_Type");
                });

            modelBuilder.Entity("Model.Entities.OrganizationObjectConnection", b =>
                {
                    b.HasOne("Model.Entities.ActivityTemplate", "ActivityTemplateGu")
                        .WithMany("OrganizationObjectConnection")
                        .HasForeignKey("ActivityTemplateGuid")
                        .HasConstraintName("FK_Organization_Object_Connection_Activity_template");

                    b.HasOne("Model.Entities.Description", "DescriptionGu")
                        .WithMany("OrganizationObjectConnection")
                        .HasForeignKey("DescriptionGuid")
                        .HasConstraintName("FK_Organization_Object_Connection_Description");

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("OrganizationObjectConnection")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Organization_Object_Connection_Model_Component");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("OrganizationObjectConnection")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Organization_Object_Connection_Organization_Object")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.OrganizationStructure", b =>
                {
                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithOne("OrganizationStructureOrgObjGu")
                        .HasForeignKey("Model.Entities.OrganizationStructure", "OrgObjGuid")
                        .HasConstraintName("FK_Organization_Structure_Organization_Object")
                        .IsRequired();

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjParentGu")
                        .WithMany("OrganizationStructureOrgObjParentGu")
                        .HasForeignKey("OrgObjParentGuid")
                        .HasConstraintName("FK_Organization_Structure_Organization_Object1");

                    b.HasOne("Model.Entities.Organization", "OrgParentGu")
                        .WithMany("OrganizationStructure")
                        .HasForeignKey("OrgParentGuid")
                        .HasConstraintName("FK_Organization_Structure_Organization");
                });

            modelBuilder.Entity("Model.Entities.OutSourceScore", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany()
                        .HasForeignKey("ModelComponentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.RolePermissions", b =>
                {
                    b.HasOne("Model.Entities.PermissionTypes", "PermissionType")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionTypeId")
                        .HasConstraintName("FK_PermisionTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Roles", b =>
                {
                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("Roles")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Users_Organization_Object")
                        .IsRequired();

                    //b.HasOne("Model.Entities.User", "UpdateUser")
                    //    .WithMany("Roles")
                    //    .HasForeignKey("UpdateUserId")
                    //    .HasConstraintName("FK_Users")
                    //    .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.SavedReportByActivites", b =>
                {
                    b.HasOne("Model.Entities.SavedReportByActivites", "SavedReportByActivitesNavigation")
                        .WithOne("InverseSavedReportByActivitesNavigation")
                        .HasForeignKey("Model.Entities.SavedReportByActivites", "ReportGuid", "ModelGuid", "ActivityGuid")
                        .HasConstraintName("FK_Saved_Report_By_Activites_Saved_Report_By_Activites")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.SavedReportConnection", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "CommentNavigation")
                        .WithMany("SavedReportConnectionCommentNavigation")
                        .HasForeignKey("Comment")
                        .HasConstraintName("FK_Saved_Report_Connection_Model_Component1");

                    b.HasOne("Model.Entities.ModelComponent", "FocusNavigation")
                        .WithMany("SavedReportConnectionFocusNavigation")
                        .HasForeignKey("Focus")
                        .HasConstraintName("FK_Saved_Report_Connection_Model_Component");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("SavedReportConnection")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Saved_Report_Connection_Organization_Object");

                    b.HasOne("Model.Entities.SavedReports", "ReportGu")
                        .WithMany("SavedReportConnection")
                        .HasForeignKey("ReportGuid")
                        .HasConstraintName("FK_Saved_Report_Connection_Saved_reports");
                });

            modelBuilder.Entity("Model.Entities.SavedReportWeakness", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("SavedReportWeakness")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Saved_Report_Weakness_Model_Component")
                        .IsRequired();

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("SavedReportWeakness")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Saved_Report_Weakness_Organization_Object")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.SavedReports", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("SavedReports")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Saved_reports_Model_Component")
                        .IsRequired();

                    b.HasOne("Model.Entities.ReportType", "ReportTypeNavigation")
                        .WithMany("SavedReports")
                        .HasForeignKey("ReportType")
                        .HasConstraintName("FK_Saved_reports_Report_Type")
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "UserGu")
                        .WithMany("SavedReports")
                        .HasForeignKey("UserGuid")
                        .HasConstraintName("FK_Saved_reports_User")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Score", b =>
                {
                    b.HasOne("Model.Entities.Activity", "ActivityGu")
                        .WithMany("Score")
                        .HasForeignKey("ActivityGuid")
                        .HasConstraintName("FK_Score_Activity");

                    b.HasOne("Model.Entities.FormElement", "FormElementGu")
                        .WithMany("Score")
                        .HasForeignKey("FormElementGuid")
                        .HasConstraintName("FK_Score_Form_Element");

                    b.HasOne("Model.Entities.Form", "FormGu")
                        .WithMany("Score")
                        .HasForeignKey("FormGuid")
                        .HasConstraintName("FK_Score_Form");

                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("Score")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Score_Model_Component");

                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("Score")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Score_Organization_Object");

                    b.HasOne("Model.Entities.Score", "ScoreNavigation")
                        .WithOne("InverseScoreNavigation")
                        .HasForeignKey("Model.Entities.Score", "ScoreId")
                        .HasConstraintName("FK_Score_Score")
                        .IsRequired();

                    b.HasOne("Model.Entities.FormStatus", "StatusNavigation")
                        .WithMany("Score")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_Score_Form_Status");
                });

            modelBuilder.Entity("Model.Entities.Threshold", b =>
                {
                    b.HasOne("Model.Entities.ModelComponent", "ModelComponentGu")
                        .WithMany("Threshold")
                        .HasForeignKey("ModelComponentGuid")
                        .HasConstraintName("FK_Thresholds_Models")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Unit", b =>
                {
                    b.HasOne("Model.Entities.Unit", "UnitParentGu")
                        .WithMany("InverseUnitParentGu")
                        .HasForeignKey("UnitParentGuid")
                        .HasConstraintName("FK_Units_Units");

                    b.HasOne("Model.Entities.UnitTypes", "UnitTypeGu")
                        .WithMany("Unit")
                        .HasForeignKey("UnitTypeGuid")
                        .HasConstraintName("FK_Units_Unit_types");
                });

            modelBuilder.Entity("Model.Entities.UnitBinding", b =>
                {
                    b.HasOne("Model.Entities.Unit", "UnitGu")
                        .WithMany("UnitBinding")
                        .HasForeignKey("UnitGuid")
                        .HasConstraintName("FK_Unit_binding")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.UnitTypes", b =>
                {
                    b.HasOne("Model.Entities.UnitTypes", "UnitTypeParentGu")
                        .WithMany("InverseUnitTypeParentGu")
                        .HasForeignKey("UnitTypeParentGuid")
                        .HasConstraintName("FK_Unit_types_Unit_types");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.HasOne("Model.Entities.OrganizationObject", "OrgObjGu")
                        .WithMany("User")
                        .HasForeignKey("OrgObjGuid")
                        .HasConstraintName("FK_Users_Organization_Object");

                    b.HasOne("Model.Entities.Roles", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Roles_Id")
                        .IsRequired();

                    b.HasOne("Model.Entities.UserType", "UserTypeNavigation")
                        .WithMany("User")
                        .HasForeignKey("UserType")
                        .HasConstraintName("FK_UserType_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
