// <auto-generated />
using System;
//using DBManageAndSurvey.FormsDynamicDB;
using FormsDal.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Model.Migrations
{
    partial class FormsDynamicDBMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicActivityTrace", b =>
                {
                    b.Property<decimal>("ActivityTraceId")
                        .HasColumnType("numeric");

                    b.Property<string>("ActivityEndDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("ActivityGuid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ActivityStartDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<bool>("CanSubmitOnce_")
                        .HasColumnType("boolean")
                        .HasColumnName("CanSubmitOnce ");

                    b.Property<string>("CreationDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("EvaluatedAndEvaluators")
                        .HasColumnType("json");

                    b.Property<string>("Forms")
                        .HasColumnType("json");

                    b.Property<int?>("FormsDBID")
                        .HasColumnType("integer");

                    b.Property<string>("FormsDBName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("FromEffectDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("boolean");

                    b.Property<int>("RecordStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("ToEffectDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("UpdateDate")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("UpdateUserId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ActivityTraceId")
                        .HasName("ActivityTrace_pkey");

                    b.HasIndex(new[] { "RecordStatusCode" }, "IX_FormsActivityTrace_RecordStatusCode");

                    b.ToTable("DynamicActivityTrace", (string)null);
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicForm", b =>
                {
                    b.Property<string>("FormGuid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ActivityGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("EvaluatedGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Evaluatedtype")
                        .HasColumnType("integer");

                    b.Property<string>("EvaluatorGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EvaluatorType")
                        .HasColumnType("integer");

                    b.Property<int>("FormStatus")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdateGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UpdateDate")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.HasKey("FormGuid")
                        .HasName("Form_pkey");

                    b.HasIndex("FormStatus");

                    b.ToTable("DynamicForm", (string)null);
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicFormStatus", b =>
                {
                    b.Property<int>("FormStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("FormStatusName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("FormStatusCode")
                        .HasName("FormStatus_pkey");

                    b.ToTable("DynamicFormStatus", (string)null);
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicRecordStatus", b =>
                {
                    b.Property<int>("RecordStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatusName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("RecordStatusCode")
                        .HasName("RecordStatus_pkey");

                    b.ToTable("DynamicRecordStatus", (string)null);
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicScore", b =>
                {
                    b.Property<int>("FormComponentRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("character varying");

                    b.Property<string>("FormGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModelComponentGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("FormComponentRecordId")
                        .HasName("FormComponent_pkey");

                    b.HasIndex("FormGuid");

                    b.ToTable("DynamicScores");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicActivityTrace", b =>
                {
                    b.HasOne("DBManageAndSurvey.FormsDynamicDB.DynamicRecordStatus", "RecordStatusCodeNavigation")
                        .WithMany("DynamicActivityTraces")
                        .HasForeignKey("RecordStatusCode")
                        .IsRequired()
                        .HasConstraintName("RecordStatusCode_FK");

                    b.Navigation("RecordStatusCodeNavigation");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicForm", b =>
                {
                    b.HasOne("DBManageAndSurvey.FormsDynamicDB.DynamicFormStatus", "FormStatusNavigation")
                        .WithMany("DynamicForms")
                        .HasForeignKey("FormStatus")
                        .IsRequired()
                        .HasConstraintName("FormStatus_FK");

                    b.Navigation("FormStatusNavigation");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicScore", b =>
                {
                    b.HasOne("DBManageAndSurvey.FormsDynamicDB.DynamicForm", "FormGu")
                        .WithMany("DynamicScores")
                        .HasForeignKey("FormGuid")
                        .IsRequired()
                        .HasConstraintName("FormGuid_FK");

                    b.Navigation("FormGu");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicForm", b =>
                {
                    b.Navigation("DynamicScores");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicFormStatus", b =>
                {
                    b.Navigation("DynamicForms");
                });

            modelBuilder.Entity("DBManageAndSurvey.FormsDynamicDB.DynamicRecordStatus", b =>
                {
                    b.Navigation("DynamicActivityTraces");
                });
#pragma warning restore 612, 618
        }
    }
}
